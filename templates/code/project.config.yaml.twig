# AWS ECS task definitions for the docker containers used to run api, nginx, worker and cron
dns_domain: {{ dns_domain }}
api:
  cpu: 512
  memory: 1024
  volumes:
    - storage-volume
    - data-volume
  health_check_grace_period: 0
  task_definition:
    api:
      repo: {{ code.ecr_repo }}/{{ project }}
      image: backend
      tag_param: ApiTag
      user: www-data
      env_vars:
        SSM_PATH:
          Fn::Sub: /{{ ssm_prefix }}/${EnvironmentName}
        FORMAT: shell
        DB_DATABASE: {{ db_name }}
        DB_PORT: 3306
        DB_CONNECTION: mysql
        DB_HOST:
          Fn::Sub: mysql.${EnvironmentName}.${DnsDomain}
        {% if elasticsearch_enabled -%}
        ELASTICSEARCH_HOST:
          # PHP elasticsearch/elasticsearch assumes port 9200 if no port is present
          Fn::Sub: https://${ElasticSearchHost}:443
        {% endif -%}
        AWS_REGION:
          Ref: AWS::Region
        APP_ENV:
          Fn::Sub: ${EnvironmentName}
        SQS_QUEUE_URL:
          Ref: SqsUrl
        {% if redis_enabled -%}
        REDIS_HOST: 
          Fn::Sub: redis.${EnvironmentName}.${DnsDomain}
        {% endif -%}
        TO_STDOUT: true
        LOG_LEVEL: warn
      ports:
       - 9000:9000
    nginx:
      repo: {{ code.ecr_repo }}/{{ project }}
      image: nginx
      tag_param: NginxTag
      ports:
        - 80:80

  targetgroup:
    name: api
    type: ip
    container: nginx
    port: 80
    protocol: http
    listener: https
    healthcheck:
      path: /ping
      code: 200
    rules:
      - host: api.*
        priority: 10
    tags:
        Name: api
    attributes:
      deregistration_delay.timeout_seconds: 60

  iam_policies:
    ssm-parameters-ro:
      action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:GetParametersByPath
        - ssm:DescribeParameters
    sqs:
      action:
      - sqs:*

  ip_blocks:
    local:
      - 169.254.169.254/32

  security_group:
    - rules:
      -
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      ips:
        - local

  task_ingress_rules:
    -
      from_port: 80
      to_port: 80


worker:
  volumes:
    - data-volume
    - storage-volume
  cpu: 256
  memory: 512
  task_definition:
    worker:
      repo: {{ code.ecr_repo }}/{{ project }}
      image: backend
      user: www-data
      tag_param: WorkerTag
      command: [ "php", "artisan", "queue:work", "--sleep=3", "--tries=3", "--delay=30" ]
      cpu: 256
      memory: 256
      env_vars:
        DB_DATABASE: {{ db_name }}
        DB_PORT: 3306
        DB_CONNECTION: mysql
        DB_HOST:
          Fn::Sub: mysql.${EnvironmentName}.${DnsDomain}
        {% if elasticsearch_enabled -%}
        ELASTICSEARCH_HOST:
          # PHP elasticsearch/elasticsearch assumes port 9200 if no port is present
          Fn::Sub: https://${ElasticSearchHost}:443
        {% endif -%}
        SSM_PATH:
          Fn::Sub: /{{ ssm_prefix }}/${EnvironmentName}
        LOG_LEVEL: warn
        TO_STDOUT: true
        FORMAT: shell
        AWS_REGION:
          Ref: AWS::Region
        APP_ENV:
          Fn::Sub: ${EnvironmentName}
        SQS_QUEUE_URL:
          Ref: SqsUrl
        {% if redis_enabled -%}
        REDIS_HOST:
          Fn::Sub: redis.${EnvironmentName}.${DnsDomain}
        {% endif -%}

  iam_policies:
    ssm-parameters-ro:
      action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:GetParametersByPath
        - ssm:DescribeParameters
    sqs:
      action:
        - sqs:*

cron:
  volumes:
    - data-volume
    - storage-volume
  cpu: 256
  memory: 512
  task_definition:
    cron:
      repo: {{ code.ecr_repo }}/{{ project }}
      image: backend
      tag_param: CronTag
      entrypoint: [ "/usr/local/bin/cron-entrypoint.sh" ]
      cpu: 256
      memory: 256
      env_vars:
        DB_DATABASE: {{ db_name }}
        DB_PORT: 3306
        DB_CONNECTION: mysql
        DB_HOST:
          Fn::Sub: mysql.${EnvironmentName}.${DnsDomain}
        {% if elasticsearch_enabled -%}
        ELASTICSEARCH_HOST:
          # PHP elasticsearch/elasticsearch assumes port 9200 if no port is present
          Fn::Sub: https://${ElasticSearchHost}:443
        {% endif -%}
        SSM_PATH:
          Fn::Sub: /{{ ssm_prefix }}/${EnvironmentName}
        FORMAT: shell
        AWS_REGION:
          Ref: AWS::Region
        APP_ENV:
          Fn::Sub: ${EnvironmentName}
        SQS_QUEUE_URL:
          Ref: SqsUrl
        {% if redis_enabled -%}
        REDIS_HOST:
          Fn::Sub: redis.${EnvironmentName}.${DnsDomain}
        {% endif -%}

  iam_policies:
    ssm-parameters-ro:
      action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:GetParametersByPath
        - ssm:DescribeParameters
    sqs:
      action:
        - sqs:*

{% if cli_enabled %}
cli:
  cpu: 512
  memory: 512
  task_definition:
    cli:
      repo: {{ code.ecr_repo }}/{{ project }}
      image: backend
      tag_param: CliTag
      entrypoint: [ "tail", "-f", "/dev/null" ]
      cpu: 512
      memory: 512
      env_vars:
        DB_DATABASE: {{ db_name }}
        DB_PORT: 3306
        DB_CONNECTION: mysql
        DB_HOST:
          Fn::Sub: mysql.${EnvironmentName}.${DnsDomain}
        {% if elasticsearch_enabled -%}
        ELASTICSEARCH_HOST:
          # PHP elasticsearch/elasticsearch assumes port 9200 if no port is present
          Fn::Sub: https://${ElasticSearchHost}:443
        {% endif -%}
        SSM_PATH:
          Fn::Sub: /{{ ssm_prefix }}/${EnvironmentName}
        FORMAT: shell
        AWS_REGION:
          Ref: AWS::Region
        APP_ENV:
          Fn::Sub: ${EnvironmentName}
        SQS_QUEUE_URL:
          Ref: SqsUrl

  iam_policies:
    ssm-parameters-ro:
      action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:GetParameterByPath
        - ssm:DescribeParameters
    sqs:
      action:
        - sqs:*
{% endif %}
