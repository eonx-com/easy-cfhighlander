# AWS ECS Task to update api, worker and cron
CfhighlanderComponent do

    Parameters do
      ComponentParam 'ApiTag'
      ComponentParam 'NginxTag'
      ComponentParam 'WorkerTag'
      ComponentParam 'CronTag'
      ComponentParam 'EnvironmentName', 'dev', isGlobal: true
      ComponentParam 'EnvironmentType', 'development', isGlobal: true, allowedValues: ['development','production']
    end

    # AWS Fargate service responsible to run the docker containers for the API
    Component name: '{{ project }}-api-service', template: 'git:https://github.com/Samseppiol/hl-component-fargate.git', config: api do
      Parameters do
        ComponentParam 'SqsUrl', type:'String'
      end
      parameter name: 'ApiTag', value: Ref('ApiTag')
      parameter name: 'NginxTag', value: Ref('NginxTag')
      parameter name: 'EcsCluster', value: FnImportValue(FnSub("${EnvironmentName}-ecs-EcsCluster"))
      parameter name: 'Listener', value: FnImportValue(FnSub("${EnvironmentName}-loadbalancer-httpsListener"))
      parameter name: 'VPCId', value: FnImportValue(FnSub("${EnvironmentName}-vpc-VPCId"))
      parameter name: 'DnsDomain', value: dns_domain
      parameter name: 'SqsUrl', value: FnImportValue(FnSub("${EnvironmentName}-sqs-{{ sqs_queue }}Url"))
      parameter name: 'Subnets', value: FnImportValue(FnSub("${EnvironmentName}-vpc-ComputeSubnets"))
      parameter name: 'LoadbalancerSecurityGroup', value: FnImportValue(FnSub("${EnvironmentName}-loadbalancer-SecurityGroupLoadBalancer"))
    {%- if elasticsearch_enabled ~%}
      parameter name: 'ElasticSearchHost', value: FnImportValue(FnSub("${EnvironmentName}-elasticsearch-ESClusterEndpoint"))
    {%- endif ~%}
    end

  # AWS Fargate service responsible to run the docker containers for the queue workers
  Component name: '{{ project }}-worker-service', template: 'git:https://github.com/Samseppiol/hl-component-fargate.git', config: worker do
    Parameters do
      ComponentParam 'SqsUrl', type:'String'
    end
    parameter name: 'WorkerTag', value: Ref('WorkerTag')
    parameter name: 'EcsCluster', value: FnImportValue(FnSub("${EnvironmentName}-ecs-EcsCluster"))
    parameter name: 'VPCId', value: FnImportValue(FnSub("${EnvironmentName}-vpc-VPCId"))
    parameter name: 'DnsDomain', value: dns_domain
    parameter name: 'SqsUrl', value: FnImportValue(FnSub("${EnvironmentName}-sqs-{{ sqs_queue }}Url"))
    parameter name: 'Subnets', value: FnImportValue(FnSub("${EnvironmentName}-vpc-ComputeSubnets"))
    parameter name: 'SecurityGroupBackplane', value: FnImportValue(FnSub("${EnvironmentName}-vpc-SecurityGroupBackplane"))
  {%- if elasticsearch_enabled ~%}
    parameter name: 'ElasticSearchHost', value: FnImportValue(FnSub("${EnvironmentName}-elasticsearch-ESClusterEndpoint"))
  {%- endif ~%}
  end

  # AWS Fargate service responsible to run the docker containers for the cron commands
  Component name: '{{ project }}-cron-service', template: 'git:https://github.com/Samseppiol/hl-component-fargate.git', config: cron do
    Parameters do
      ComponentParam 'SqsUrl', type:'String'
    end
    parameter name: 'CronTag', value: Ref('CronTag')
    parameter name: 'EcsCluster', value: FnImportValue(FnSub("${EnvironmentName}-ecs-EcsCluster"))
    parameter name: 'VPCId', value: FnImportValue(FnSub("${EnvironmentName}-vpc-VPCId"))
    parameter name: 'DnsDomain', value: dns_domain
    parameter name: 'SqsUrl', value: FnImportValue(FnSub("${EnvironmentName}-sqs-{{ sqs_queue }}Url"))
    parameter name: 'Subnets', value: FnImportValue(FnSub("${EnvironmentName}-vpc-ComputeSubnets"))
    parameter name: 'SecurityGroupBackplane', value: FnImportValue(FnSub("${EnvironmentName}-vpc-SecurityGroupBackplane"))
  {%- if elasticsearch_enabled ~%}
    parameter name: 'ElasticSearchHost', value: FnImportValue(FnSub("${EnvironmentName}-elasticsearch-ESClusterEndpoint"))
  {%- endif ~%}
  end
  
end
