@Library('ciinabox') _

def slackInfo(message){
  slackSend color: '#7dc141', channel: '#{{ project }}-ops', message: "${env.JOB_NAME} - ${env.BUILD_URL} | ${message}"
}
def slackWarning(message){
  slackSend color: '#ffc300', channel: '#{{ project }}-ops', message: "${env.JOB_NAME} - ${env.BUILD_URL} | ${message}"
}
def slackError(message){
  slackSend color: '#e80d4b', channel: '#{{ project }}-ops', message: "${env.JOB_NAME} - ${env.BUILD_URL} | ${message}"
}

def dockerScan(body) {
  sh "/bin/start-clair.sh"
  if (body.accountId && body.region) {
    body.image = "${env.ECR_REPO}/${body.image}"
    ecr_login = sh (script: "aws ecr get-login --region ap-southeast-2 --no-include-email", returnStdout: true)
    def match = (ecr_login =~ /docker login -u AWS -p (.+) https:\/\/599070804856\.dkr\.ecr\.ap-southeast-2\.amazonaws\.com/)
    body.password = match[0][1]
  }

  runKlar(body)
}

def runKlar(body) {
  def image = body.image
  def token = body.get('token', '')
  def threshold = body.get('threshold', 'Critical')
  def password = body.password

  if (body.action.toLowerCase() == 'ignore') {
    sh "DOCKER_USER=AWS DOCKER_PASSWORD=${password} JSON_OUTPUT=true CLAIR_OUTPUT=${threshold} /bin/klar ${image} || true"
  } else {
    sh "DOCKER_USER=AWS DOCKER_PASSWORD=${password} JSON_OUTPUT=true CLAIR_OUTPUT=${threshold} /bin/klar ${image}"
  }
}

pipeline {
  environment {
    AWS_REGION = '{{ aws_region }}'
    ECR_REPO = '{{ code.ecr_repo }}'
    PROJECT_NAME = '{{ project }}'
    SOURCE_BUCKET = '{{ source_bucket }}'
    OPS_ACCOUNT_ID = '{{ ops_account }}'
    DEV_ACCOUNT_ID = '{{ dev_account }}'
    PROD_ACCOUNT_ID = '{{ prod_account }}'
    CIINABOX_ROLE = '{{ ciinabox_role }}'
    BRANCH = env.BRANCH_NAME.replaceAll('/','-')
    BUILD_VER = "${env.BRANCH}-${env.GIT_COMMIT.substring(0,7)}"
  }
  parameters {
    booleanParam(name: 'UPDATE_SCHEMA_TASK_DEF', defaultValue: false, description: 'Update Schema Task Def')
    booleanParam(name: 'UPDATE_SCHEMA', defaultValue: true, description: 'Update Schema Task Def')
  }
  agent {
    node {
      label 'docker'
    }
  }
  options { disableConcurrentBuilds() }
  stages {
    stage('Prepare Build') {
      steps {
        script {
          env['SHORT_COMMIT'] = env.GIT_COMMIT.substring(0,7)
          env['VERSION'] = "${env.BRANCH_NAME.replace('/', '')}-${env.SHORT_COMMIT}"
          if(env.BRANCH_NAME == 'master') {
            env['VERSION'] = "master-${env.SHORT_COMMIT}"
          }
        }
        sh "aws s3 cp s3://${SOURCE_BUCKET}/scripts/auth.json auth.json"
        sh "mkdir vendor"

        ecr accountId: env.OPS_ACCOUNT_ID,
          region: env.AWS_REGION,
          image: "${env.PROJECT_NAME}/backend",
          otherAccountIds: [env.DEV_ACCOUNT_ID, env.PROD_ACCOUNT_ID],
          taggedCleanup: ['master']

        ecr accountId: env.OPS_ACCOUNT_ID,
          region: env.AWS_REGION,
          image: "${env.PROJECT_NAME}/nginx",
          otherAccountIds: [env.DEV_ACCOUNT_ID, env.PROD_ACCOUNT_ID],
          taggedCleanup: ['master']

        ecr accountId: env.OPS_ACCOUNT_ID,
          region: env.AWS_REGION,
          image: "${env.PROJECT_NAME}/backend/toscan",
          taggedCleanup: ['master']

        ecr accountId: env.OPS_ACCOUNT_ID,
          region: env.AWS_REGION,
          image: "${env.PROJECT_NAME}/nginx/toscan",
          taggedCleanup: ['master']
      }
    }
    stage('Build containers') {
        steps {
            parallel(
                "Build api": {
                    dockerBuild repo: env.ECR_REPO,
                    image: "${env.PROJECT_NAME}/backend/toscan",
                    dir: './',
                    dockerfile: 'docker/api/Dockerfile',
                    tags: ['latest', env.VERSION],
                    push: true,
                    cleanup: false
                },
                "Build nginx": {
                    dockerBuild repo: env.ECR_REPO,
                    image: "${env.PROJECT_NAME}/nginx/toscan",
                    dir: './',
                    dockerfile: 'docker/nginx/Dockerfile',
                    tags: ['latest', env.VERSION],
                    push: true,
                    cleanup: false
                }
            )
        }
    }
    stage('Scan containers for vulnerabilities') {
        agent {
            docker {
                image 'base2/clair:latest'
            }
        }
        steps {
            parallel(
                "Scan API": {
                    dockerScan(
                        threshold: 'Critical',
                        accountId: env.OPS_ACCOUNT_ID,
                        image: "${env.PROJECT_NAME}/backend/toscan:${env.VERSION}",
                        action: 'Ignore',
                        region: env.AWS_REGION
                    )
                },
                "Scan Nginx": {
                    dockerScan(
                        threshold: 'Critical',
                        accountId: env.OPS_ACCOUNT_ID,
                        image: "${env.PROJECT_NAME}/nginx/toscan:${env.VERSION}",
                        action: 'Ignore',
                        region: env.AWS_REGION
                    )
                }
            )
        }
    }
    stage('Tag and push scanned images') {
        steps {
            parallel(
                "Tag and push API": {
                    dockerTag repo: env.ECR_REPO,
                    image: "${env.PROJECT_NAME}/backend/toscan",
                    newImage: "${env.PROJECT_NAME}/backend",
                    baseTag: 'latest',
                    tags: ['latest', 'scanned', env.VERSION],
                    push: true,
                    cleanup: true
                },
                "Tag and push Nginx": {
                    dockerTag repo: env.ECR_REPO,
                    image: "${env.PROJECT_NAME}/nginx/toscan",
                    newImage: "${env.PROJECT_NAME}/nginx",
                    baseTag: 'latest',
                    tags: ['latest', 'scanned', env.VERSION],
                    push: true,
                    cleanup: true
                }
            )
        }
    }
    stage('Compile and Validate') {
      agent {
        docker {
          image 'theonestack/cfhighlander'
          reuseNode true
        }
      }
      steps {
        sh "cfhighlander cfcompile ${env.PROJECT_NAME} --validate"
        sh "cfhighlander cfcompile ${env.PROJECT_NAME}-schema --validate"
      }
    }
    stage('Publish') {
      agent {
        docker {
          image 'theonestack/cfhighlander'
          reuseNode true
        }
      }
      steps {
        sh "env && cfhighlander cfpublish ${env.PROJECT_NAME} --version ${env.VERSION} --dstbucket ${env.SOURCE_BUCKET} --dstprefix cloudformation/${env.PROJECT_NAME}"
        sh "env && cfhighlander cfpublish ${env.PROJECT_NAME}-schema --version ${env.VERSION} --dstbucket ${env.SOURCE_BUCKET} --dstprefix cloudformation/${env.PROJECT_NAME}-schema"
      }
    }
    stage('Update Dev Schema Environment') {
      when {
        expression { (env.BRANCH_NAME == 'development') && params.UPDATE_SCHEMA_TASK_DEF == true }
      }
      steps {
        println "Update Schema Task Def Dev Environment"
        cloudformation(
          stackName: 'dev-{{ project }}-schema',
          action: 'create',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}-schema/${env.VERSION}/${env.PROJECT_NAME}-schema.compiled.yaml",
          accountId: env.DEV_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'dev',
            'EnvironmentType': 'development'
          ]
        )
        cloudformation(
          stackName: 'dev-{{ project }}-schema',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}-schema/${env.VERSION}/${env.PROJECT_NAME}-schema.compiled.yaml",
          accountId: env.DEV_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'dev',
            'EnvironmentType': 'development'
          ]
        )
      }
    }
    stage('Update Dev Schema') {
      environment {
        ENV = "dev"
      }
      when {
        expression { (env.BRANCH_NAME == 'development') && params.UPDATE_SCHEMA == true }
      }
      steps {
        println "Updating Schema"
        withAWS(roleAccount:env.DEV_ACCOUNT_ID, region:env.AWS_REGION, role:env.CIINABOX_ROLE) {
          script {
            env.TASK_DEF = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-${env.PROJECT_NAME}-schema-task-EcsTaskArn`].Value' --output text --region ${AWS_REGION}").trim()
            env.CLUSTER = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-ecs-EcsCluster`].Value' --output text --region ${AWS_REGION}").trim()
            env.SECURITYGROUP = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-vpc-SecurityGroupBackplane`].Value' --output text --region ${AWS_REGION}").trim()
            env.SUBNETS = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-vpc-ComputeSubnets`].Value' --output text --region ${AWS_REGION}").trim()
            env.SUBNETS = env.SUBNETS.split(',')[0]
            sh "printenv"
          }
        }
        ecsTask (
            action: 'runAndWait',
            taskDefinition: env.TASK_DEF,
            cluster: env.CLUSTER,
            region: env.AWS_REGION,
            accountId: env.DEV_ACCOUNT_ID,
            subnets: env.SUBNETS,
            securityGroup: env.SECURITYGROUP,
            launchType: 'FARGATE',
            role: 'ciinabox'
        )
      }
    }
    stage('Update Dev Environment') {
      when {
        expression { env.BRANCH_NAME == 'development' }
      }
      steps {
        println "Updating Dev Environment"
        cloudformation(
          stackName: 'dev-{{ project }}',
          action: 'create',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.VERSION}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.DEV_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'dev',
            'EnvironmentType': 'development',
            'ApiTag': env.VERSION,
            'NginxTag': env.VERSION,
            'WorkerTag': env.VERSION,
            'CronTag': env.VERSION
          ]
        )
        cloudformation(
          stackName: 'dev-{{ project }}',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.VERSION}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.DEV_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'ApiTag': env.VERSION,
            'NginxTag': env.VERSION,
            'WorkerTag': env.VERSION,
            'CronTag': env.VERSION
          ]
        )
      }
    }
    stage('Update Uat Schema Environment') {
        when {
            expression { (env.BRANCH_NAME == 'master') && params.UPDATE_SCHEMA_TASK_DEF == true }
        }
        steps {
            println "Update Schema Task Def Uat Environment"
            cloudformation(
                stackName: 'uat-{{ project }}-schema',
                action: 'create',
                region: env.AWS_REGION,
                templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}-schema/${env.VERSION}/${env.PROJECT_NAME}-schema.compiled.yaml",
                accountId: env.PROD_ACCOUNT_ID,
                role: env.CIINABOX_ROLE,
                parameters: [
                    'EnvironmentName': 'uat',
                    'EnvironmentType': 'production'
                ]
            )
            cloudformation(
                stackName: 'uat-{{ project }}-schema',
                action: 'update',
                region: env.AWS_REGION,
                templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}-schema/${env.VERSION}/${env.PROJECT_NAME}-schema.compiled.yaml",
                accountId: env.PROD_ACCOUNT_ID,
                role: env.CIINABOX_ROLE,
                parameters: [
                    'EnvironmentName': 'uat',
                    'EnvironmentType': 'production'
                ]
            )
        }
    }
    stage('Update Uat Schema') {
        environment {
            ENV = "uat"
        }
        when {
            expression { (env.BRANCH_NAME == 'master') && params.UPDATE_SCHEMA == true }
        }
        steps {
            println "Updating Schema"
            withAWS(roleAccount:env.PROD_ACCOUNT_ID, region:env.AWS_REGION, role:env.CIINABOX_ROLE) {
                script {
                    env.TASK_DEF = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-${env.PROJECT_NAME}-schema-task-EcsTaskArn`].Value' --output text --region ${AWS_REGION}").trim()
                    env.CLUSTER = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-ecs-EcsCluster`].Value' --output text --region ${AWS_REGION}").trim()
                    env.SECURITYGROUP = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-vpc-SecurityGroupBackplane`].Value' --output text --region ${AWS_REGION}").trim()
                    env.SUBNETS = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-vpc-ComputeSubnets`].Value' --output text --region ${AWS_REGION}").trim()
                    env.SUBNETS = env.SUBNETS.split(',')[0]
                    sh "printenv"
                }
            }
            ecsTask (
                action: 'runAndWait',
                taskDefinition: env.TASK_DEF,
                cluster: env.CLUSTER,
                region: env.AWS_REGION,
                accountId: env.PROD_ACCOUNT_ID,
                subnets: env.SUBNETS,
                securityGroup: env.SECURITYGROUP,
                launchType: 'FARGATE',
                role: 'ciinabox'
            )
        }
    }
    stage('Update Uat Environment') {
        when {
            expression { env.BRANCH_NAME == 'master' }
        }
        steps {
            println "Updating Uat Environment"
            cloudformation(
                stackName: 'uat-{{ project }}',
                action: 'create',
                region: env.AWS_REGION,
                templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.VERSION}/${env.PROJECT_NAME}.compiled.yaml",
                accountId: env.PROD_ACCOUNT_ID,
                role: env.CIINABOX_ROLE,
                parameters: [
                    'EnvironmentName': 'uat',
                    'EnvironmentType': 'production',
                    'ApiTag': env.VERSION,
                    'NginxTag': env.VERSION,
                    'WorkerTag': env.VERSION,
                    'CronTag': env.VERSION
                ]
            )
            cloudformation(
                stackName: 'uat-{{ project }}',
                action: 'update',
                region: env.AWS_REGION,
                templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.VERSION}/${env.PROJECT_NAME}.compiled.yaml",
                accountId: env.PROD_ACCOUNT_ID,
                role: env.CIINABOX_ROLE,
                parameters: [
                    'ApiTag': env.VERSION,
                    'NginxTag': env.VERSION,
                    'WorkerTag': env.VERSION,
                    'CronTag': env.VERSION
                ]
            )
        }
    }
    stage('Deploy to production') {
      when {
        expression { env.BRANCH_NAME == 'master' }
      }
      steps {
        timeout(time: 120, unit: 'MINUTES') {
            script {
                input( message: 'Deploy to prod?' )
            }
        }
      }
    }
    stage('Update prod Schema Environment') {
      when {
        expression { env.BRANCH_NAME == 'master' && params.UPDATE_SCHEMA_TASK_DEF == true }
      }
      steps {
        println "Update Schema Task Def prod Environment"
        sh "export"
        cloudformation(
          stackName: 'prod-{{ project }}-schema',
          action: 'create',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}-schema/${env.VERSION}/${env.PROJECT_NAME}-schema.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'prod',
            'EnvironmentType': 'production'
          ]
        )
        cloudformation(
          stackName: 'prod-{{ project }}-schema',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}-schema/${env.VERSION}/${env.PROJECT_NAME}-schema.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'prod',
            'EnvironmentType': 'production'
          ]
        )
      }
    }
    stage('Update Prod Schema') {
        environment {
            ENV = "prod"
        }
        when {
            expression { (env.BRANCH_NAME == 'master') && params.UPDATE_SCHEMA == true }
        }
        steps {
            println "Updating Schema"
            withAWS(roleAccount:env.PROD_ACCOUNT_ID, region:env.AWS_REGION, role:env.CIINABOX_ROLE) {
                script {
                    env.TASK_DEF = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-${env.PROJECT_NAME}-schema-task-EcsTaskArn`].Value' --output text --region ${AWS_REGION}").trim()
                    env.CLUSTER = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-ecs-EcsCluster`].Value' --output text --region ${AWS_REGION}").trim()
                    env.SECURITYGROUP = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-vpc-SecurityGroupBackplane`].Value' --output text --region ${AWS_REGION}").trim()
                    env.SUBNETS = sh (returnStdout: true, script: "aws cloudformation list-exports --query 'Exports[?Name==`${ENV}-vpc-ComputeSubnets`].Value' --output text --region ${AWS_REGION}").trim()
                    env.SUBNETS = env.SUBNETS.split(',')[0]
                    sh "printenv"
                }
            }
            ecsTask (
                action: 'runAndWait',
                taskDefinition: env.TASK_DEF,
                cluster: env.CLUSTER,
                region: env.AWS_REGION,
                accountId: env.PROD_ACCOUNT_ID,
                subnets: env.SUBNETS,
                securityGroup: env.SECURITYGROUP,
                launchType: 'FARGATE',
                role: 'ciinabox'
            )
        }
    }
    stage('Update prod Environment') {
      when {
        expression { env.BRANCH_NAME == 'master' }
      }
      steps {
        println "Updating PROD Environment"
        cloudformation(
          stackName: 'prod-{{ project }}',
          action: 'create',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.VERSION}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'prod',
            'EnvironmentType': 'production',
            'ApiTag': env.VERSION,
            'NginxTag': env.VERSION,
            'WorkerTag': env.VERSION,
            'CronTag': env.VERSION
          ]
        )
        cloudformation(
          stackName: 'prod-{{ project }}',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.AWS_REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.VERSION}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'ApiTag': env.VERSION,
            'NginxTag': env.VERSION,
            'WorkerTag': env.VERSION,
            'CronTag': env.VERSION
          ]
        )
      }
    }
  }
  post {
      success {
        slackInfo "SUCCESS"
      }
      unstable {
        slackWarning "UNSTABLE"
      }
      failure {
        slackError "!!! FAILED !!!"
      }
      always {
            deleteDir()
        }
  }
}
