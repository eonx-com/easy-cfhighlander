@Library('ciinabox') _

pipeline{
  agent {
    node {
      label 'docker'
    }
  }
  options {
    disableConcurrentBuilds()
  }
  environment {
    AWS_REGION = '{{ aws_region }}'
    REGION = '{{ cloudformation.region }}'
    PROJECT_NAME = '{{ project }}'
    SOURCE_BUCKET = '{{ source_bucket }}'
    DEV_ACCOUNT_ID = '{{ dev_account }}'
    PROD_ACCOUNT_ID = '{{ prod_account }}'
    CIINABOX_ROLE = '{{ ciinabox_role }}'
  }
  parameters {
     string(name: 'CHEF_BRANCH', defaultValue: "${env.BRANCH_NAME}", description: 'Chef branch for AMIs')
     string(name: 'BASTION_SPOT_PRICE', defaultValue: '0.0146', description: 'Spot price for bastion, set to ondemand price of t2.micro')
     string(name: 'ECS_SPOT_PRICE', defaultValue: '0.0292', description: 'Spot price for ECS, set to ondemand price of t2.small')
  }
  stages {
    stage('Compile and Validate') {
      agent {
        docker {
          image 'theonestack/cfhighlander:0.8.2'
          reuseNode true
        }
      }
      steps {
        sh "rm -rf ~/cfhighlander/.cfhighlander"
        sh "cfhighlander cfcompile ${env.PROJECT_NAME} --validate"
        sh "cat az.mappings.yaml"
      }
    }
    stage('Publish') {
      agent {
        docker {
          image 'theonestack/cfhighlander:0.8.2'
          reuseNode true
        }
      }
      steps {
        script {
          println "env:${env.GIT_COMMIT}"
          env['cf_version'] = env.BRANCH_NAME
          env['project_name'] = env.PROJECT_NAME
          env['BRANCH'] = env.BRANCH_NAME
          env['SHORT_COMMIT'] = env.GIT_COMMIT.substring(0,7)
          if(env.BRANCH_NAME == 'master') {
            env['cf_version'] = "master-${env.SHORT_COMMIT}"
          }
        }
        sh "env && cfhighlander cfpublish ${env.PROJECT_NAME} --version ${env.cf_version} --dstbucket ${env.SOURCE_BUCKET} --dstprefix cloudformation/${env.PROJECT_NAME}"
      }
    }
    stage('Fetch AMI and Container Mappings') {
      steps {
        sh """#!/bin/bash
        aws s3 cp s3://${env.SOURCE_BUCKET}/amis/${params.CHEF_BRANCH}-ami-latest.yml ${params.CHEF_BRANCH}-ami-latest.yml --region ${env.REGION}
        """
        script {
          mappings = readYaml file: "${params.CHEF_BRANCH}-ami-latest.yml"
          bastionAMI = "${mappings['bastionAMI'][env.REGION]['ami']}"
          ecsAMI = "${mappings['EcsAMI'][env.REGION]['ami']}"
        }
      }
    }
    stage('Update Dev Environment') {
      when {
        expression { env.BRANCH_NAME == 'develop' }
      }
      steps {
        println "Create Dev Environment"
        println ""
        cloudformation(
          stackName: 'dev-{{ project }}',
          action: 'create',
          region: env.REGION,
          templateUrl: "https://s3-${env.REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.cf_version}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.DEV_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'dev',
            'EnvironmentType': 'development',
            'NetworkPrefix': '10',
            'StackOctet': '130',
            'bastionAmi': bastionAMI,
            'bastionSpotPrice': params.BASTION_SPOT_PRICE,
            'ecsAmi': ecsAMI,
            'ecsSpotPrice': params.ECS_SPOT_PRICE
          ]
        )
        println "Update Dev Environment"
        println ""
        cloudformation(
          stackName: 'dev-{{ project }}',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.cf_version}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.DEV_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'dev',
            'EnvironmentType': 'development',
            'bastionAmi': bastionAMI,
            'bastionSpotPrice': params.BASTION_SPOT_PRICE,
            'ecsAmi': ecsAMI,
            'ecsSpotPrice': params.ECS_SPOT_PRICE
          ]
        )
      }
    }
    stage('Update UAT Environment') {
      when {
        expression { env.BRANCH_NAME == 'master' }
      }
      steps {
        println "Create uat Environment"
        println ""
        cloudformation(
          stackName: 'uat-{{ project }}',
          action: 'create',
          region: env.REGION,
          templateUrl: "https://s3-${env.REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.cf_version}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'uat',
            'EnvironmentType': 'production',
            'NetworkPrefix': '10',
            'StackOctet': '120',
            'bastionAmi': bastionAMI,
            'bastionSpotPrice': params.BASTION_SPOT_PRICE,
            'ecsAmi': ecsAMI,
            'ecsSpotPrice': params.ECS_SPOT_PRICE
          ]
        )
        println "Update uat Environment"
        println ""
        cloudformation(
          stackName: 'uat-{{ project }}',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.cf_version}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'uat',
            'EnvironmentType': 'production',
            'bastionAmi': bastionAMI,
            'bastionSpotPrice': params.BASTION_SPOT_PRICE,
            'ecsAmi': ecsAMI,
            'ecsSpotPrice': params.ECS_SPOT_PRICE
          ]
        )
      }
    }
    stage('Update prod Environment') {
      when {
        expression { env.BRANCH_NAME == 'master' }
      }
      steps {
        timeout(time: 120, unit: 'MINUTES') {
            script {
                input( message: 'Deploy to prod?' )
            }
        }
        println "Create prod Environment"
        println ""
        cloudformation(
          stackName: 'prod-{{ project }}',
          action: 'create',
          region: env.REGION,
          templateUrl: "https://s3-${env.REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.cf_version}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'prod',
            'EnvironmentType': 'production',
            'NetworkPrefix': '10',
            'StackOctet': '110',
            'SingleNatGateway': 'false',
            'MaxNatGateways': '3',
            'bastionAmi': bastionAMI,
            'ecsAmi': ecsAMI
          ]
        )
        println "Update prod Environment"
        println ""
        cloudformation(
          stackName: 'prod-{{ project }}',
          action: 'update',
          region: env.AWS_REGION,
          templateUrl: "https://s3-${env.REGION}.amazonaws.com/${env.SOURCE_BUCKET}/cloudformation/${env.PROJECT_NAME}/${env.cf_version}/${env.PROJECT_NAME}.compiled.yaml",
          accountId: env.PROD_ACCOUNT_ID,
          role: env.CIINABOX_ROLE,
          parameters: [
            'EnvironmentName': 'prod',
            'EnvironmentType': 'production',
            'bastionAmi': bastionAMI,
            'ecsAmi': ecsAMI,
          ]
        )
      }
    }
  }
  post {
      always {
            deleteDir()
        }
  }
}
